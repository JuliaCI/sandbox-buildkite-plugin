steps:
  - label: ":desert: :toolbox: Basic sandboxing test (Julia v1)"
    agents:
      queue: "juliaecosystem"
      sandbox_capable: "true"
      arch: "x86_64"
    plugins:
      - JuliaCI/julia#v1:
          version: "1"
      # Use the current directory as the plugin source, so we're testing this version of `sandbox`
      - "./.buildkite/plugins/sandbox":
          rootfs_url: "https://github.com/staticfloat/Sandbox.jl/releases/download/debian-minimal-927c9e7f/debian_minimal.tar.gz"
          rootfs_treehash: "5b44fab874ec426cad9b80b7dffd2b3f927c9e7f"
          verbose: true
          uid: 1000
          gid: 1000
    commands: |
      set -x
      [[ "$(grep PRETTY_NAME /etc/os-release | cut -d= -f2)" == "\"Debian GNU/Linux 10 (buster)\"" ]]
      [[ "$(id -u)" == "1000" ]]
      [[ "$(id -g)" == "1000" ]]
  
  - label: ":desert: :toolbox: Basic sandboxing test (Julia v1.10)"
    agents:
      queue: "juliaecosystem"
      sandbox_capable: "true"
      arch: "x86_64"
    plugins:
      - JuliaCI/julia#v1:
          version: "1.10"
      # Use the current directory as the plugin source, so we're testing this version of `sandbox`
      - "./.buildkite/plugins/sandbox":
          rootfs_url: "https://github.com/staticfloat/Sandbox.jl/releases/download/debian-minimal-927c9e7f/debian_minimal.tar.gz"
          rootfs_treehash: "5b44fab874ec426cad9b80b7dffd2b3f927c9e7f"
          verbose: true
          uid: 1000
          gid: 1000
    commands: |
      set -x
      [[ "$(grep PRETTY_NAME /etc/os-release | cut -d= -f2)" == "\"Debian GNU/Linux 10 (buster)\"" ]]
      [[ "$(id -u)" == "1000" ]]
      [[ "$(id -g)" == "1000" ]]

  - label: ":desert: :toolbox: Basic sandboxing test (Julia nightly)"
    agents:
      queue: "juliaecosystem"
      sandbox_capable: "true"
      arch: "x86_64"
    plugins:
      - JuliaCI/julia#v1:
          version: "nightly"
      # Use the current directory as the plugin source, so we're testing this version of `sandbox`
      - "./.buildkite/plugins/sandbox":
          rootfs_url: "https://github.com/staticfloat/Sandbox.jl/releases/download/debian-minimal-927c9e7f/debian_minimal.tar.gz"
          rootfs_treehash: "5b44fab874ec426cad9b80b7dffd2b3f927c9e7f"
          verbose: true
          uid: 1000
          gid: 1000
    commands: |
      set -x
      [[ "$(grep PRETTY_NAME /etc/os-release | cut -d= -f2)" == "\"Debian GNU/Linux 10 (buster)\"" ]]
      [[ "$(id -u)" == "1000" ]]
      [[ "$(id -g)" == "1000" ]]

  - label: ":desert: :toolbox: workspaces test"
    agents:
      queue: "juliaecosystem"
      sandbox_capable: "true"
      arch: "x86_64"
    plugins:
      - JuliaCI/julia#v1:
          version: "1"
      # Create a file in the outside environment
      - improbable-eng/metahook:
          pre-command: |
            echo "Writing out sentinel file at $${JULIA_DEPOT_PATH}/foo.tmp"
            echo "foo" > $${JULIA_DEPOT_PATH}/foo.tmp
          pre-exit: |
            echo "Cleaning up sentinel file at $${JULIA_DEPOT_PATH}/foo.tmp"
            rm -f $${JULIA_DEPOT_PATH}/foo.tmp
      # Use the current directory as the plugin source, so we're testing this version of `sandbox`
      - "./.buildkite/plugins/sandbox":
          rootfs_url: "https://github.com/staticfloat/Sandbox.jl/releases/download/debian-minimal-927c9e7f/debian_minimal.tar.gz"
          rootfs_treehash: "5b44fab874ec426cad9b80b7dffd2b3f927c9e7f"
          verbose: true
          workspaces:
            - "/cache:/cache"
            
    commands: |
      # Ensure that our `workspaces` mapping above actually works
      set -x
      [[ -f $${JULIA_DEPOT_PATH}/foo.tmp ]]
      [[ "$$(cat $${JULIA_DEPOT_PATH}/foo.tmp | xargs)" == "foo" ]]
